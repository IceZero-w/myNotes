阻止浏览器默认事件：event.preventDefault();
阻止事件冒泡：e.stopPropagation();
面向对象编程oop:类的继承：Student.prototype = Object.creat(Person.prototype); Student.prototype.custructor = Person;
数组首部插入删除：arr.unshift(0) arr.shift();
数组尾部插入删除：arr.push(0) arr.pop();
Node指令：supervisor
去掉默认浏览器默认input样式：input{outline:none;}
字符串转换成可执行的js代码：
	var jsonStr = "alert('hello world')";
	eval(jsonStr);    //输出hello world

css初始化：
	body, div, dl, dt, dd, ul, ol, li, h1, h2, h3, h4, h5, h6, pre, code, form, fieldset, legend, 	input, button, textarea, p, blockquote, th, td {
    		margin: 0;
    		padding: 0;
	}

display:inherit;//从父元素继承 display 属性的值。
表格样式格式化：border-collapse:collapse;
过滤器：
	取到奇数： tr:odd     取到偶数： tr:even
	tr:eq(2) 匹配给定索引值的元素。
	tr:gt(5) 匹配所有大于给定索引值的元素。
	tr:lt(3) 匹配所有小于给定索引值的元素。
	tr:header  匹配所有的如h1,h2,h3...之类的标签元素
	input:not(:checked)  去除所有与给定选择器匹配的元素
	$(li:contains(‘DOM’))  匹配内容含有"DOM"的DOM的元素
	td:empty 匹配所有不包含子元素或者文本为空的元素
	td:parent  匹配所有含有子元素或者有文本的元素
	td:has(p)  匹配td中含有p标签的单元格
可见性过滤器：
	:hidden
	:visible
表单对象的属性过滤器：
	:checked
	:disabled  匹配所有不可用元素
	:enabled   匹配所有可用元素
	:selected
子元素过滤器：
	:only-child   匹配唯一的子元素
属性选择器：
	div[name*='d']  匹配name属性中含有d的div元素
	div[name~='d']  匹配name属性中以d开头的div元素
	div[name$='d']  匹配name属性中以d结束的div元素
数组sort()：array.sort(function(a,b){
		if(a<b){
			return -1;
		  	}else if(a==b){
					return 0;
			}else{
				return 1;
			}
		})
兼容ie透明度：filter:alpha(opacity=0);     //filter(过滤器)

文本溢出变省略号：父元素{overflow: hidden;
  			text-overflow: ellipsis;
  			white-space: nowrap;}

四分之一角：	类名｛	width:0;
		height:0;
		border-top:19px solid #ccc;
		border-right:19px solid #ccc;｝
尖角：.content4-content-box-head .code:before{
  	content: '';
  	display: block;
  	position: absolute;
  	top: -14px;
  	left: 44px;
  	width: 0;
  	height: 0;
  	border-style: solid;
  	border-width: 7px;
  	border-color: transparent transparent #fff transparent；
	}

优先级：&& > || >  ?:
typeof(0 == "\n")    //true
js取整：Math.floor();
js获取数组arr的最小值：Math.min.apply(null,arr);
js获取元素本身宽度：var width = 对象.offsetWidth;
js获取元素本身距离窗口顶部的高度 = 对象.offsetTop;
js获取页面宽度：var width = document.documentElement.clientWidth;
js获取滚动条滚动的距离：var scrollTop = document.body.scrollTop || document.documentElement.scrollTop;(解决浏览器兼容问题 第一个是在混杂模式下的距离，第二个是在普通模式下的距离)
js获取浏览器窗口可视区域的高度：
			var height = document.body.clientHeight || document.documentElement.scrollTop


第一天：

<s>删除线</s>
<u>下划线</u>

javascript:ECMAScript（描述了js的语法和基本对象）,DOM(文档对象模型)（处理网页内容的方法和接口）,BOM（与浏览器交互的方法和接口）

语法标准：
语法  变量和数据类型 运算符 逻辑控制语句 关键字，保留字 对象


js弹窗：
alert("");
prompt(“提示信息”，“输入框默认信息”)；
confirm("信息")；


第二天：
parseInt('字符串');     转换成整型
parseFloat('字符串');    转换成浮点类型
1.isNaN()     判断是否不是数值   var a='';alert(isNaN(a));  返回false；
                               var a=' ';alert(isNaN(a));   返回false;    
                               空字符，空格默认为0，所以返回false;
                               默认true=1,false=0,所以也返回false;


2.Window对象的常用属性：
    scree:有关客户端的屏幕和显示性能的信息
    history:有关客户访问过的URL的信息
    location:有关当前URL的信息

	close:关闭浏览器窗口
	open:打开新窗口，加载给定URL所指定的文档
	setTimeout('执行操作',时间);   延迟
	setInterval  按照指定的周期来调用函数或表达式

3.＆quot(引号)   &lt(<)  &gt(>)  &amp(&)

4.表单禁止状态：disabled;

js事件:
	onload,onmouseover,onclick,onkeydown,onchange

匿名函数:
	(function(){
	    alert('自发执行的函数！');
		}())

获取时间：
	1.  var today=new Date();
	2.  var today = new Date('september 1,2009,14:58:12');
	3.  Second和Minute  取值：0-59
	4.  Hour  取值：0-23
	5.  Day  取值：0-6   (获得周几)
	6.  Date  取值：1-31
	7.  Month  取值：0-11
	
history对象：
	back()向后退一页
	forward()向前进一页
	go()到第N页

location对象：
	href 获取当前页面路径或者根据路径进入某个页面
	reload() 重新加载页面

第三天：
	visible:可见的
	hidden:隐藏
语法：object.style.visibility="值";

checked属性： checked='true';/checked='false';    checked='false';





第四天：String对象

1.字符串的方法名:
	toLowerCase()      把字符串转换为小写    97-122
	toUpperCase()      把字符转换为大写     65-90
	charAt(index)	   返回在指定位置的字符
	toCharArray()       将字符串转换成一个字符数组
	indexOf(字符串，index)   查找某个指定的字符值在字符串首次出现的位置/index是开始索引的位置
	lastIndexOf(字符串)		从字符串尾部开始检索					
	substring(index1,inde2)   返回位于索引index1与index2之间的字符串，并且包括index1对应的字符，但不				  包括index2对应的字符
	split(" ");      将字符串'aa bb cc dd'以空格分隔开变成数组:["aa","bb","cc","dd"]

2.文本框事件：    onblur ,onfocus , onkeypress(某个键盘按键被按下并松开)
  文本框方法：    blur()（从文本域中移开焦点） focus()（使文本域获得焦点）select()（选取文本域中的内容）




第五天：js与css交互

1.style属性（只能获取行内样式），img.style.css='border:1px solid red';
  className属性：img.className = '先前定义好的类名'；
　　　
2.currentStyle属性(只在ie上有用)
3.getComputedStyle（'对象'，null）属性（没有限制）
	用法：document.defaultView.getComputedStyle(mydiv,null).width;
		或者 window.getComputedStyle(mydiv,null).width;

4.滚动条：
   1.scrollTop 
   2.scrollLeft
   3.clientWidth  浏览器中可见内容的高度，不包括滚动条等边线，会随窗口的显示大小改变
   4.clientHeight  浏览器中可以看到内容区域的高度
用法：document.body.scrollTop;	
	document.body.scrollLeft;




5-4:
	w3c规定的三类DOM标准接口：1.Core DOM   2.XML Dom，专用于XML文档    3.HTML DOM,专用于HTML文档

	查看/修改属性节点：getAttribute("属性名")     setAttribute("属性名","属性值")
	parentNode,firstChild,lastChild,firstElementChild（ie没用）,lastElementChild(ie没用)，children[0]（推荐使用）
	
	创建和增加节点的方法：	
			父元素.createElement();创建节点
			父元素.appendChild();末尾追加方式插入节点
			父元素.document.body.insertBefore('oldNode','newNode');在指定节点前插入新节点
			var 新节点=所要克隆的元素.cloneNode(false);克隆节点
	删除和替换节点的方法：
			父元素.removeChild()；删除节点
			父元素.replaceChild(newNode,lodNode);替换节点
	
	table对象：
		属性：rows[]  返回所有的tr的一个数组
		方法：
			insertRow()
			deletedRow()

	tableRow表格行对象：
			属性：cells[]   返回包含行中所有单元格的一个数组
			      rowIndex  返回该行在表中的位置
			方法：insertCell() 在一行中的指定位置插入一个空的<td>标签
			      deletedCell() 删除行中指定的单元格
	tableCell单元格行对象：
			属性：cellIndex  返回单元格在某行单元格集合中的位置
				innerHTML  设置或返回单元格的开始标签和结束标签之间的HTML
				align  设置或返回单元格内部数据的水平排列方式
				className  设置或返回元素的class属性




第七天：
	正则表达式：
		普通方式：var reg = /表达式/附加参数
			举例：var reg= /he/;
			var str ='zhuhello'; 
			
		构造函数：var reg=new RegExp('表达式'.'附加参数')
	
	RegExp对象的方法：
		exec:检索字符中是正则表达式的匹配，返回找到的值，并确定其位置
		test:检索字符中指定的值，返回true或false

	string对象的方法：
		match:找到一个或多个正则表达式的匹配。
		search:检索与正则表达式相匹配的值；
		replace:替换与正则表达式匹配的字符串
		split:把字符串分割为字符串数组;
	
	select对象：
		事件：onchange
		方法：简单：add(new,old)   向下拉列表中添加一个选项  复杂：add(new Options(newold),);
		属性：options 返回包含下拉列表中所有选项的一个数组
			selectedIndex 设置或返回下拉列表中被选中项目的索引号
			length  返回下拉列表中选项的数目

数组：
	创建：	var arr = new arr(3);arr[1]="王"；arr[0]="圣"；arr[2]="康"；
		var arr = new arr("王","圣"，"康")；
	
	属性：	length
	方法：	join('|') 把数组的所有元素放入一个字符串，通过一个的|进行分隔
		push() 插入数组
		sort() 对数组的元素进行排序
		arr.concat(3,4)  拼接数组
		arr.slice(1,-1)  得到数组片段
		arr.splice(2)  删除数组下标2以及之后的元素
		arr.splice(2,2) 从下标为2开始删除2个元素
		arr.splice(2,1,'a','b')  将下标为2的元素替换成‘a’,'b'
		arr.indexOf(1)  在数组中查找1，找到返回1，否则返回-1


第八天：
	事件监听器：
		变量名.addEventListener("事件方法",函数名，true/false);  true为捕获事件，由外向内层标签执行； false为冒泡事件，有内向外执行。
		div[0].addEventListener("click",evt1,false);
	
	ie的事件监听器：
		变量名.attachEvent("事件方法"，函数名);
		divs[0].attachEvent("onclick",evt1);

	移除事件：变量名.removeEventListener("click"，函数名，true/false);
	ie的移除事件:obj.detachEvent("onclick",函数名)


	阻止addEventListener事件的发生：1.event.stopPropagation();
					2.window.event.cancelBubble = true;






























